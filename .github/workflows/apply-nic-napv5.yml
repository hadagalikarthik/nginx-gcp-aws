name: "NGINX NIC/NAP-V5 Deployment"
on:
  push:
    branches: apply-nic-napv5
env:
  CLOUD_PROVIDER: "GCP"
########### To be set by the user ###########
#  TF_VAR_GCP_BUCKET_NAME: ${{ secrets.TF_VAR_GCP_BUCKET_NAME }}
#  TF_VAR_GCP_REGION: ${{ secrets.TF_VAR_GCP_REGION }}
#  TF_VAR_project_prefix: ${{ secrets.TF_VAR_PROJECT_PREFIX }}
#  TF_VAR_GCP_BUCKET_NAME: "hk-bucket-tf"
#  TF_VAR_GCP_REGION: "asia-south1"
  TF_VAR_GCP_BUCKET_NAME: ${{ vars.TF_VAR_BUCKET_NAME }}
  TF_VAR_GCP_REGION: ${{ vars.TF_VAR_GCP_REGION }}
  TF_VAR_AWS_S3_BUCKET_NAME: "hk-bucket-tf"
  TF_VAR_AWS_REGION: "ap-south-1"
  TF_VAR_project_prefix: ${{ vars.TF_VAR_PROJECT_PREFIX }}
  TF_VAR_GCP_PROJECT_ID: ${{ secrets.TF_VAR_GCP_PROJECT_ID }}
  TF_VAR_GOOGLE_CREDENTIALS: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}
  WORKSPACE_PATH: "./GCP/nap"
  nginx_jwt: ${{ secrets.NGINX_JWT }}

jobs:
  terraform_bootstrap:
    name: "Bucket"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        if: env.CLOUD_PROVIDER == 'AWS'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.TF_VAR_AWS_REGION }}

      - name: Set up Google Cloud Authentication
        if: env.CLOUD_PROVIDER == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Set working directory dynamically
        run: |
          export WORKING_DIRECTORY=${{ env.CLOUD_PROVIDER }}/bucket
          CURRENT_DIR=$(pwd)  # Capture the current working directory
          FULL_PATH="${CURRENT_DIR}/${WORKING_DIRECTORY}"
          echo "Working directory is $FULL_PATH"
          echo "FULL_PATH=$FULL_PATH" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform
        working-directory: ${{ env.FULL_PATH }}
        run: terraform init

      - name: Terraform Plan
        working-directory: ${{ env.FULL_PATH }}
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Check for Changes
        id: check_changes
        run: |
          if grep -q "No changes." <(terraform show -no-color tfplan); then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        working-directory: ${{ env.FULL_PATH }}
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_infra:
      name: "Infra"
      runs-on: ubuntu-latest
      needs:  terraform_bootstrap
      permissions:
        contents: read

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Configure AWS Credentials
          if: env.CLOUD_PROVIDER == 'AWS'
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
            aws-region: ${{ env.TF_VAR_AWS_REGION }}

        - name: Set up Google Cloud Authentication
          if: env.CLOUD_PROVIDER == 'GCP'
          uses: google-github-actions/auth@v2
          with:
            credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

        - name: Set working directory dynamically
          run: |
            export WORKING_DIRECTORY=${{ env.CLOUD_PROVIDER }}/infra
            CURRENT_DIR=$(pwd)  # Capture the current working directory
            FULL_PATH="${CURRENT_DIR}/${WORKING_DIRECTORY}"
            echo "Working directory is $FULL_PATH"
            echo "FULL_PATH=$FULL_PATH" >> $GITHUB_ENV

        - name: Setup Terraform
          uses: hashicorp/setup-terraform@v3

        - name: Initialize Terraform with GCP Backend
          if: env.CLOUD_PROVIDER == 'GCP'
          working-directory: ${{ env.FULL_PATH }}
          run: |
            terraform init \
              -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME" \
              -backend-config="prefix=infra/terraform.tfstate"

        - name: Initialize Terraform with AWS Backend
          if: env.CLOUD_PROVIDER == 'AWS'
          working-directory: ${{ env.FULL_PATH }}
          run: |
            terraform init \
              -backend-config="key=infra/terraform.tfstate" \
              -backend-config="dynamodb_table=terraform-lock-table" \
              -backend-config="encrypt=true" \
              -backend-config="bucket=$TF_VAR_AWS_S3_BUCKET_NAME" \
              -backend-config="region=$TF_VAR_AWS_REGION"

        - name: Terraform Plan
          working-directory: ${{ env.FULL_PATH }}
          if: github.event_name == 'pull_request' || github.event_name == 'push'
          run: |
            terraform plan -no-color -input=false -out=tfplan
            terraform show -no-color tfplan > plan.txt

        - name: Check for Changes
          id: check_changes
          run: |
            if grep -q "No changes." <(terraform show -no-color tfplan); then
              echo "has_changes=false" >> $GITHUB_OUTPUT
            else
              echo "has_changes=true" >> $GITHUB_OUTPUT
            fi

        - name: Terraform Apply
          working-directory: ${{ env.FULL_PATH }}
          if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
          run: terraform apply -auto-approve tfplan

  terraform_gke:
    name: "GCP GKE"
    runs-on: ubuntu-latest
    needs: terraform_infra
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        if: env.CLOUD_PROVIDER == 'AWS'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.TF_VAR_AWS_REGION }}

      - name: Set up Google Cloud Authentication
        if: env.CLOUD_PROVIDER == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Set working directory dynamically
        run: |
          export WORKING_DIRECTORY=${{ env.CLOUD_PROVIDER }}/cluster
          CURRENT_DIR=$(pwd)  # Capture the current working directory
          FULL_PATH="${CURRENT_DIR}/${WORKING_DIRECTORY}"
          echo "Working directory is $FULL_PATH"
          echo "FULL_PATH=$FULL_PATH" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform with GCP Backend
        if: env.CLOUD_PROVIDER == 'GCP'
        working-directory: ${{ env.FULL_PATH }}
        run: |
          terraform init \
            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME" \
            -backend-config="prefix=cluster/terraform.tfstate"

      - name: Initialize Terraform with AWS Backend
        if: env.CLOUD_PROVIDER == 'AWS'
        working-directory: ${{ env.FULL_PATH }}
        run: |
          terraform init \
            -backend-config="key=cluster/terraform.tfstate" \
            -backend-config="dynamodb_table=terraform-lock-table" \
            -backend-config="encrypt=true" \
            -backend-config="bucket=$TF_VAR_AWS_S3_BUCKET_NAME" \
            -backend-config="region=$TF_VAR_AWS_REGION"

      - name: Terraform Plan
        working-directory: ${{ env.FULL_PATH }}
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false  -out=tfplan
          terraform show -no-color tfplan > plan.txt

      - name: Check for Changes
        id: check_changes
        run: |
          if grep -q "No changes." <(terraform show -no-color tfplan); then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        working-directory: ${{ env.FULL_PATH }}
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve tfplan

  terraform_nap:
    name: "NGINX App Protect"
    runs-on: ubuntu-latest
    needs: terraform_gke
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        if: env.CLOUD_PROVIDER == 'AWS'
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.TF_VAR_AWS_REGION }}

      - name: Set up Google Cloud Authentication
        if: env.CLOUD_PROVIDER == 'GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}

      - name: Set working directory dynamically
        run: |
          export WORKING_DIRECTORY=${{ env.CLOUD_PROVIDER }}/nap
          CURRENT_DIR=$(pwd)  # Capture the current working directory
          FULL_PATH="${CURRENT_DIR}/${WORKING_DIRECTORY}"
          echo "Working directory is $FULL_PATH"
          echo "FULL_PATH=$FULL_PATH" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialize Terraform with GCP Backend
        if: env.CLOUD_PROVIDER == 'GCP'
        working-directory: ${{ env.FULL_PATH }}
        run: |
          terraform init \
            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME" \
            -backend-config="prefix=nap/terraform.tfstate"

      - name: Initialize Terraform with AWS Backend
        if: env.CLOUD_PROVIDER == 'AWS'
        working-directory: ${{ env.FULL_PATH }}
        run: |
          terraform init \
            -backend-config="key=nap/terraform.tfstate" \
            -backend-config="dynamodb_table=terraform-lock-table" \
            -backend-config="encrypt=true" \
            -backend-config="bucket=$TF_VAR_AWS_S3_BUCKET_NAME" \
            -backend-config="region=$TF_VAR_AWS_REGION"

      - name: Terraform Plan
        working-directory: ${{ env.FULL_PATH }}
        if: github.event_name == 'pull_request' || github.event_name == 'push'
        run: |
          terraform plan -no-color -input=false -lock=false -out=tfplan \
            -var="workspace_path=${{ env.WORKSPACE_PATH }}" \
            -var="nginx_jwt=${{ secrets.NGINX_JWT }}" \
            -var="nginx_pwd=none"
          terraform show -no-color tfplan > plan.txt

      - name: Check Changes
        id: check_changes
        run: |
          if grep -q "No changes." plan.txt; then
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi

      - name: Terraform Apply
        working-directory: ${{ env.FULL_PATH }}
        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
        run: terraform apply -auto-approve -lock=false tfplan

#  terraform_policy:
#    name: "NGINX Policy"
#    runs-on: ubuntu-latest
#    needs: terraform_nap
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Configure AWS Credentials
#        if: env.CLOUD_PROVIDER == 'AWS'
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#          aws-region: ${{ env.TF_VAR_AWS_REGION }}
#
#      - name: Set up Google Cloud Authentication
#        if: env.CLOUD_PROVIDER == 'GCP'
#        uses: google-github-actions/auth@v2
#        with:
#          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}
#
#      - name: Set working directory dynamically
#        run: |
#          export WORKING_DIRECTORY=${{ env.CLOUD_PROVIDER }}/policy
#          CURRENT_DIR=$(pwd)  # Capture the current working directory
#          FULL_PATH="${CURRENT_DIR}/${WORKING_DIRECTORY}"
#          echo "Working directory is $FULL_PATH"
#          echo "FULL_PATH=$FULL_PATH" >> $GITHUB_ENV
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v3
#
#      #    - name: Terraform Init (GKE)
#      #      if: env.CLOUD_PROVIDER == 'GCP'
#      #      run: |
#      #        terraform init \
#      #          -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"
#      #      working-directory: ./gcp/cluster
#      #
#      #    - name: Terraform Init (EKS)
#      #      if: env.CLOUD_PROVIDER == 'AWS'
#      #      run: |
#      #        terraform init \
#      #          -backend-config="bucket=${{ env.TF_VAR_AWS_S3_BUCKET_NAME }}" \
#      #          -backend-config="region=${{ env.TF_VAR_AWS_REGION }}"
#      #      working-directory: ./cluster
#
#      - name: Initialize Terraform with GCP Backend
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: |
#          terraform init \
#            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME" \
#            -backend-config="prefix=nap/terraform.tfstate"
#        working-directory: ./GCP/cluster
#
#      - name: Initialize Terraform with AWS Backend
#        if: env.CLOUD_PROVIDER == 'AWS'
#        run: |
#          terraform init \
#            -backend-config="key=nap/terraform.tfstate" \
#            -backend-config="dynamodb_table=terraform-lock-table" \
#            -backend-config="encrypt=true"
#        working-directory: ./AWS/cluster
#
#      - name: Print GKE Terraform Outputs
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: terraform output
#        working-directory: ./GCP/cluster
#
#      - name: Print EKS Terraform Outputs
#        if: env.CLOUD_PROVIDER == 'AWS'
#        run: terraform output
#        working-directory: ./AWS/cluster
#
#      - name: Fetch EKS Cluster Name and Region
#        if: env.CLOUD_PROVIDER == 'AWS'
#        run: |
#          echo "EKS_CLUSTER_NAME=$(terraform output -raw cluster_name)" >> $GITHUB_ENV
#          echo "AWS_REGION=$AWS_REGION" >> $GITHUB_ENV
#        working-directory: ./AWS/cluster
#
#      - name: Configure kubectl for EKS
#        if: env.CLOUD_PROVIDER == 'AWS'
#        run: |
#          aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_REGION
#
#      - name: Authenticate to Google Cloud
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: |
#          echo "$TF_VAR_GOOGLE_CREDENTIALS" | gcloud auth activate-service-account --key-file=-
#
#      - name: Fetch GKE Cluster Name and Region
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: |
#          echo "GKE_CLUSTER_NAME=$data.terraform_remote_state.gke.outputs.kubernetes_cluster_name" >> $GITHUB_ENV
#          echo "GCP_REGION=$TF_VAR_GCP_REGION" >> $GITHUB_ENV
#        working-directory: ./GCP/cluster
#
#      - name: Install gke-gcloud-auth-plugin
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: |
#          sudo apt-get update
#          sudo apt-get install apt-transport-https ca-certificates gnupg curl
#          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
#          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
#          sudo apt-get update && sudo apt-get install google-cloud-cli
#          sudo apt-get install google-cloud-cli-gke-gcloud-auth-plugin
#
#      - name: Configure kubectl for GKE
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: |
#          gcloud container clusters get-credentials ${{ env.TF_VAR_project_prefix }}-gke --region $GCP_REGION --project $TF_VAR_GCP_PROJECT_ID
#
#      - name: Verify kubectl connectivity
#        run: kubectl get nodes -n nginx-ingress
#
#      - name: Install Docker and Docker Compose
#        run: |
#          sudo apt-get update -y
#          sudo apt-get remove -y containerd containerd.io
#          sudo apt-get install apt-transport-https ca-certificates curl software-properties-common -y
#          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
#          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
#          sudo apt-get update -y
#          sudo apt-get install docker-ce docker-ce-cli containerd.io -y
#          sudo service docker start
#          sudo usermod -aG docker $USER
#
#          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#          sudo chmod +x /usr/local/bin/docker-compose
#
#      - name: Create Certificates Directory for Docker
#        run: |
#          sudo mkdir -p /etc/docker/certs.d/private-registry.nginx.com
#
#      - name: Create NGINX Repository Certificate for Docker
#        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.cert > /dev/null
#
#      - name: Create NGINX Repository Key for Docker
#        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/docker/certs.d/private-registry.nginx.com/client.key > /dev/null
#
#      - name: Create Certificates Directory for NGINX
#        run: |
#          sudo mkdir -p /etc/ssl/nginx
#
#      - name: Save NGINX Repository Certificate for NGINX
#        run: echo "${{ secrets.NGINX_REPO_CRT }}" | sudo tee /etc/ssl/nginx/nginx-repo.crt > /dev/null
#
#      - name: Save NGINX Repository Key for NGINX
#        run: echo "${{ secrets.NGINX_REPO_KEY }}" | sudo tee /etc/ssl/nginx/nginx-repo.key > /dev/null
#
#      - name: Build Docker Image
#        run: |
#          docker build --no-cache \
#            --secret id=nginx-crt,src=/etc/ssl/nginx/nginx-repo.crt \
#            --secret id=nginx-key,src=/etc/ssl/nginx/nginx-repo.key \
#            -t waf-compiler-5.4.0:custom .
#
#      - name: Ensure correct permissions for nap/charts directory
#        run: |
#          sudo chown -R $USER:$USER ${{ github.workspace }}
#          sudo chmod -R 777 ${{ github.workspace }}
#
#      - name: Run Docker Container as Root
#        run: |
#          docker run --rm \
#              -v ${{ github.workspace }}:/workspace \
#                waf-compiler-5.4.0:custom \
#              -p /workspace/policy/policy.json -o /workspace/policy/compiled_policy.tgz
#
#      - name: Fix permissions for compiled files
#        run: |
#          sudo chown -R $USER:$USER ${{ github.workspace }}/policy
#          chmod 644 ${{ github.workspace }}/policy/compiled_policy.tgz
#          ls -lh ${{ github.workspace }}/policy
#
#      - name: Copy Compiled Policy to NGINX Ingress Controller
#        run: |
#          NGINX_POD=$(kubectl get pods -n nginx-ingress -l app.kubernetes.io/name=nginx-ingress -o jsonpath='{.items[0].metadata.name}')
#          if [ -z "$NGINX_POD" ]; then
#            echo "Error: NGINX Ingress Controller pod not found!"
#            exit 1
#          fi
#          kubectl cp ${{ github.workspace }}/policy/compiled_policy.tgz $NGINX_POD:/etc/app_protect/bundles/compiled_policy.tgz -n nginx-ingress
#
#      #    - name: Initialize Terraform (GCS Backend)
#      #      if: env.CLOUD_PROVIDER == 'GCP'
#      #      run: |
#      #        terraform init \
#      #          -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"
#      #
#      #    - name: Terraform Init
#      #      if: env.CLOUD_PROVIDER == 'AWS'
#      #      run: |
#      #        terraform init \
#      #          -backend-config="bucket=${{ env.TF_VAR_AWS_S3_BUCKET_NAME }}" \
#      #          -backend-config="region=${{ env.TF_VAR_AWS_REGION }}"
#      - name: Initialize Terraform with GCP Backend
#        if: env.CLOUD_PROVIDER == 'GCP'
#        run: |
#          terraform init \
#            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME" \
#            -backend-config="prefix=policy/terraform.tfstate"
#
#      - name: Initialize Terraform with AWS Backend
#        if: env.CLOUD_PROVIDER == 'AWS'
#        run: |
#          terraform init \
#            -backend-config="key=policy/terraform.tfstate" \
#            -backend-config="dynamodb_table=terraform-lock-table" \
#            -backend-config="encrypt=true"
#
#      - name: Terraform Plan
#        working-directory: ${{ env.FULL_PATH }}
#        run: |
#          terraform plan -no-color -input=false -out=tfplan
#          terraform show -no-color tfplan > plan.txt
#
#      - name: Check Changes
#        id: check_changes
#        run: |
#          if grep -q "No changes." plan.txt; then
#            echo "has_changes=false" >> $GITHUB_OUTPUT
#          else
#            echo "has_changes=true" >> $GITHUB_OUTPUT
#          fi
#
#      - name: Terraform Apply
#        working-directory: ${{ env.FULL_PATH }}
#        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
#        run: terraform apply -auto-approve tfplan
#
#  terraform_arcadia:
#    name: "Arcadia WebApp"
#    runs-on: ubuntu-latest
#    needs: terraform_policy
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Configure AWS Credentials
#        if: env.CLOUD_PROVIDER == 'AWS'
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
#          aws-region: ${{ env.TF_VAR_AWS_REGION }}
#
#      - name: Set up Google Cloud Authentication
#        if: env.CLOUD_PROVIDER == 'GCP'
#        uses: google-github-actions/auth@v2
#        with:
#          credentials_json: ${{ secrets.TF_VAR_GOOGLE_CREDENTIALS }}
#
#      - name: Set working directory dynamically
#        run: |
#          export WORKING_DIRECTORY=${{ env.CLOUD_PROVIDER }}/arcadia
#          CURRENT_DIR=$(pwd)  # Capture the current working directory
#          FULL_PATH="${CURRENT_DIR}/${WORKING_DIRECTORY}"
#          echo "Working directory is $FULL_PATH"
#          echo "FULL_PATH=$FULL_PATH" >> $GITHUB_ENV
#
#      - name: Setup Terraform
#        uses: hashicorp/setup-terraform@v3
#
#      #      - name: Terraform Init
#      #        run: |
#      #          terraform init \
#      #            -backend-config="bucket=${{ env.TF_VAR_AWS_S3_BUCKET_NAME }}" \
#      #            -backend-config="region=${{ env.TF_VAR_AWS_REGION }}"
#      #
#      #      - name: Initialize Terraform (GCS Backend)
#      #        run: |
#      #          terraform init \
#      #            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME"
#      - name: Initialize Terraform with GCP Backend
#        if: env.CLOUD_PROVIDER == 'GCP'
#        working-directory: ${{ env.FULL_PATH }}
#        run: |
#          terraform init \
#            -backend-config="bucket=$TF_VAR_GCP_BUCKET_NAME" \
#            -backend-config="prefix=arcadia/terraform.tfstate"
#
#      - name: Initialize Terraform with AWS Backend
#        if: env.CLOUD_PROVIDER == 'AWS'
#        working-directory: ${{ env.FULL_PATH }}
#        run: |
#          terraform init \
#            -backend-config="key=arcadia/terraform.tfstate" \
#            -backend-config="dynamodb_table=terraform-lock-table" \
#            -backend-config="encrypt=true" \
#            -backend-config="bucket=$TF_VAR_AWS_S3_BUCKET_NAME" \
#            -backend-config="region=$TF_VAR_AWS_REGION"
#
#      - name: Terraform Validate
#        run: terraform validate -no-color
#
#      - name: Terraform Plan
#        working-directory: ${{ env.FULL_PATH }}
#        if: github.event_name == 'pull_request' || github.event_name == 'push'
#        run: |
#          terraform plan -no-color -input=false -out=tfplan
#          terraform show -no-color tfplan > plan.txt
#
#      - name: Check Changes
#        id: check_changes
#        run: |
#          if grep -q "No changes." plan.txt; then
#            echo "has_changes=false" >> $GITHUB_OUTPUT
#          else
#            echo "has_changes=true" >> $GITHUB_OUTPUT
#          fi
#
#      - name: Terraform Apply
#        working-directory: ${{ env.FULL_PATH }}
#        if: github.event_name == 'push' && github.ref == 'refs/heads/apply-nic-napv5' && steps.check_changes.outputs.has_changes == 'true'
#        run: terraform apply -auto-approve tfplan
#
#      - name: Get Terraform Outputs
#        run: |
#          terraform output -json > outputs.json
#          EXTERNAL_NAME=$(jq -r '.external_name.value // empty' outputs.json)
#
#          if [ -z "$EXTERNAL_NAME" ]; then
#            echo "::warning::No external_name output found"
#          else
#            echo "external_name=$EXTERNAL_NAME" >> $GITHUB_ENV
#            echo "NGINX Ingress External Name: $EXTERNAL_NAME"
#          fi